library(Biostrings)
oligonucleotideFrequency(DNAStringSet("ATGCACGAG"), kmerlen, step=3)
oligonucleotideFrequency(DNAStringSet("ATGCACGAG"), 1, step=3)
oligonucleotideFrequency(DNAStringSet("ATGCACGAG"), 2, step=3)
oligonucleotideFrequency(DNAStringSet("ATGCACGAG"), 3, step=3)
y=oligonucleotideFrequency(DNAStringSet("ATGCACGAG"), 3, step=3)
y=y/sum(y)
y
names(y)=paste0("ORF.",names(y))
y
y=oligonucleotideFrequency(DNAStringSet("ATGCACGAG"), 3, step=3)
y
y=y/sum(y)
names(y)
colnames(y)
    colnames(y)=paste0("ORF.",colnames(y))
y
for(k in 1:3){ say(k) }
b=readme("seqFeatWithKmerFreqs.txt.gz",gzip=T)
grep("ORF",colnames(b))
grep("UTR",colnames(b))
colnames(b)[grep("UTR",colnames(b))]
colnames(b)[grep("5UTR",colnames(b))]
colnames(b)[grep("3UTR",colnames(b))]
c(1:10,grep("5UTR",colnames(b)),grep("3UTR",colnames(b)))
colnames(b)[c(1:10,grep("5UTR",colnames(b)),grep("3UTR",colnames(b)))]
grepl("MBD","M")
grepl("M","MBC")
a=c(0.571678870196075,0.59355715486411,0.597960559324704,0.547966702955913,0.580573665436957,0.589063263712008,0.577106799157753,0.576029489642296,0.566532840599238,0.577984555835929)
b=c(0.633405349179889,0.643756016077074,0.67054362120576,0.628314267845271,0.662357671314129,0.671289077874219,0.633586826038039,0.649686567782598,0.632541408916655,0.639509326896729)
a
b
t.test(a,b,paired=T)
?t.test
t.test(a,b,paired=T,alternative='less')
t.test(a,b,paired=T,alternative='grerater')
t.test(a,b,paired=T,alternative='greater')
t.test(a,b,paired=T,alternative='less')
q()
a=c(0.571678870196075,0.59355715486411,0.597960559324704,0.547966702955913,0.580573665436957,0.589063263712008,0.577106799157753,0.576029489642296,0.566532840599238,0.577984555835929)
b=c(0.572088704339919,0.594700700681903,0.599349324809181,0.548808825880754,0.579586969922931,0.584057124932884,0.573638697843249,0.576570911245299,0.567159754055771,0.575944332453018)
t.test(a,b,paired=T,alternative='less')
t.test(a,b,paired=T,alternative='greater')
a=c(0.67806005327981,0.680596323286048,0.703425696986679,0.642043154235033,0.690756493130845,0.698099079620135,0.664241368481371,0.673432102465719,0.679790224169297,0.678148175545115)
b=c(0.678752653813406,0.681938593289856,0.702797399008763,0.643055967255546,0.691889120265032,0.698673534679393,0.652994546275006,0.673914195236635,0.681878370227385,0.678904757462335)
t.test(a,b,paired=T,alternative='greater')
t.test(a,b,paired=T,alternative='less')
install.packages("reshape")
library(glmnet)
database = "BC3MSD"
a=readme("seqFeatWithKmerFreqs.txt.gz",gzip=T)
if(database == "B") a=a[,1:10]
if(database == "BC") a=a[,c(1:10,grep("Codon",colnames(a)))]
if(database == "B5") a=a[,c(1:10,grep("5UTR",colnames(a)))]
if(database == "BO") a=a[,c(1:9,grep("ORF",colnames(a)))]
if(database == "B3" | database == "B3M") a=a[,c(1:10,grep("3UTR",colnames(a)))]
if(database == "BCO") a=a[,c(1:9,grep("Codon",colnames(a)),grep("ORF",colnames(a)))]
if(grepl("BC3",database)) a=a[,c(1:10,grep("Codon",colnames(a)),grep("3UTR",colnames(a)))]
# miRNA prediction
if(grepl("M",database)){
  b=readme("CWCS.txt.gz",gzip=T)
  colnames(b)[2:ncol(b)]=paste0("MIR.",colnames(b)[2:ncol(b)])
  b[2:ncol(b)] = -1*b[2:ncol(b)]
  a=merge(a,b,by=1,all.x=1)
  a[is.na(a)]=0
  say("with miRNA features")
}
seqpreds <- function(tool){
  humanorf=readme(paste0(tool,"_predictions_v83/ORF_avg.txt.gz"), gzip=T)
  human3p=readme(paste0(tool,"_predictions_v83/3pUTR_avg.txt.gz"), gzip=T)
  human5p=readme(paste0(tool,"_predictions_v83/5pUTR_avg.txt.gz"), gzip=T)
  colnames(humanorf)[2:ncol(humanorf)]=paste0(tool,colnames(humanorf)[2:ncol(humanorf)],".ORF")
  colnames(human3p)[2:ncol(human3p)]=paste0(tool,colnames(human3p)[2:ncol(human3p)],".3UTR")
  colnames(human5p)[2:ncol(human5p)]=paste0(tool,colnames(human5p)[2:ncol(human5p)],".5UTR")
  a=merge(humanorf,human3p,by=1,all=T)
  a=merge(a,human5p,by=1,all=T)
  a[is.na(a)]=0
  a
}
if(grepl("S",database)){
  say("with SeqWeaver features")
  a=merge(a,seqpreds("SeqWeaver"),by=1)
}
if(grepl("D",database)){
  say("with DeepRiPe features")
  a=merge(a,seqpreds("DeepRiPe"),by=1)
}
say("With Ensembl IDs + Features: ", nrow(a))
say("Dimensions: ", dim(a))
if(grepl("D",database)){
  say("with DeepRiPe features")
  a=merge(a,seqpreds("DeepRiPe"),by=1)
}
say("Dimensions: ", dim(a))
apply(a,2,function(x) sum(is.na(x)))
z=apply(a,2,function(x) sum(is.na(x)))
sum(z)
z[1:10]
load("Robj/BC3MSD_CV-Lasso.Robj")
ls()
q()
library(glmnet)
load("Robj/BC3MSD_CV-Lasso.Robj")
cvfit$lambda.min
#half lives, kmer kreqs, & codon freqs features
a=readme("seqFeatWithKmerFreqs.txt.gz",gzip=T)
a=a[,c(1:10,grep("Codon",colnames(a)),grep("3UTR",colnames(a)))]
# miRNA prediction
b=readme("CWCS.txt.gz",gzip=T)
colnames(b)[2:ncol(b)]=paste0("MIR.",colnames(b)[2:ncol(b)])
b[2:ncol(b)] = -1*b[2:ncol(b)]
a=merge(a,b,by=1,all.x=1)
a[is.na(a)]=0
say("with miRNA features")
seqpreds <- function(tool){
  humanorf=readme(paste0(tool,"_predictions_v83/ORF_avg.txt.gz"), gzip=T) #mm10_90
  human3p=readme(paste0(tool,"_predictions_v83/3pUTR_avg.txt.gz"), gzip=T) #mm10_90
  human5p=readme(paste0(tool,"_predictions_v83/5pUTR_avg.txt.gz"), gzip=T) #mm10_90
  colnames(humanorf)[2:ncol(humanorf)]=paste0(tool,colnames(humanorf)[2:ncol(humanorf)],".ORF")
  colnames(human3p)[2:ncol(human3p)]=paste0(tool,colnames(human3p)[2:ncol(human3p)],".3UTR")
  colnames(human5p)[2:ncol(human5p)]=paste0(tool,colnames(human5p)[2:ncol(human5p)],".5UTR")
  a=merge(humanorf,human3p,by=1,all=T)
  a=merge(a,human5p,by=1,all=T)
  a[is.na(a)]=0
  a
}
say("with SeqWeaver features")
a=merge(a,seqpreds("SeqWeaver"),by=1)
say("with DeepRiPe features")
a=merge(a,seqpreds("DeepRiPe"),by=1)
say("With Ensembl IDs + Features: ", nrow(a))
say("Dimensions: ", dim(a))
genes = a[,1]
a[,1]=NULL
x=scale(a[,2:ncol(a)])
y=scale(a[,1])
binnedgenes = read.delim("binnedgenes.txt")
yhat <- rep(NA,length(y))
for (i in 1:10) {
  predRows <- binnedgenes$rows[binnedgenes$BIN == i]
  yhat[predRows] = predict(cvfit,newx=x[predRows,],type="response",s=cvfit$lambda.min)
  say(cor(yhat[predRows], y[predRows]))
}
i
length(predRows)
predRows <- binnedgenes$rows[binnedgenes$BIN == i]
length(predRows)
head(binnedgenes)
predRows <- rownames(binnedgenes[binnedgenes$BIN == i])
predRows <- rownames(binnedgenes)[binnedgenes$BIN == i]
length(predRows)
predRows
predRows <- rownames(binnedgenes)[binnedgenes$BIN == i]
for (i in 1:10) {
  predRows <- rownames(binnedgenes)[binnedgenes$BIN == i]
  yhat[predRows] = predict(cvfit,newx=x[predRows,],type="response",s=cvfit$lambda.min)
  say(cor(yhat[predRows], y[predRows]))
}
nrow(binnedgenes)
nrow(x)
head(binnedgenes)
head(x[,1:6])
head(genes)
predRows <- rownames(binnedgenes)[binnedgenes$BIN == 1]
head(predRows)
head(x[predRows,1:10])
head(x[predRows,1:10])
head(x[2,1:10])
head(x[c(2,16),1:10])
head(predRows)
head(as.numeric(predRows))
for (i in 1:10) {
  predRows <- as.numeric(rownames(binnedgenes)[binnedgenes$BIN == i])
  yhat[predRows] = predict(cvfit,newx=x[predRows,],type="response",s=cvfit$lambda.min)
  say(cor(yhat[predRows], y[predRows]))
}
library(glmnet)
?predict
?predict.glm
?predict.glmnet
matrix(ncol = length(mirnames), nrow = nrow(x))
matrix(ncol = 2, nrow = 2)
df = data.frame(matrix(ncol = 2, nrow = 2))
df
df = 0
df
df = data.frame(matrix(ncol = 2, nrow = 2))
df[is.na(df)] = 0
df
library(glmnet)
#mouse model tested w/ human data
load("mouse/Robj/BC3MSD_CV-Lasso.Robj")
coef.exact = coef(cvfit, s = "lambda.min", exact = TRUE)
coef.exact@Dimnames[[1]]
length(coef.exact@Dimnames[[1]])
q()
attach(iris)
iris
b=readme("mouse/CWCS.txt.gz",gzip=T)
head(b)
b[2:ncol(b)] = -1*b[2:ncol(b)]
head(b)
sum(b<0)
sum(b>0)
b[,2:ncol(b)] = -1*b[,2:ncol(b)]
sum(b>0)
sum(b<0)
head(b)
a=readme("seqFeatWithKmerFreqs.txt.gz",gzip=T)
dim(a)
a=readme("mouse/seqFeatWithKmerFreqs.txt.gz",gzip=T)
dim(a)
grep("Codon",colnames(a)))
grep("Codon",colnames(a))
length(grep("Codon",colnames(a)))
a=readme("seqFeatWithKmerFreqs.txt.gz",gzip=T)
length(grep("Codon",colnames(a)))
colnames(a)[grep("Codon",colnames(a))]
a=readme("mouse/seqFeatWithKmerFreqs.txt.gz",gzip=T)
colnames(a)[grep("Codon",colnames(a))]
attach(iris0
attach(iris)
iris
iris[,c("Species","Petal.Width")]
load("mouse/Robj/BC3MSD_CV-Lasso.Robj")
ls()
cvfit
rownames(cvfit$beta)
names(cvfit$beta)
cvfit$beta
names(cvfit$glmnet.fit$beta)
rownames(cvfit$glmnet.fit$beta)
binnedgenes = read.delim("binnedgenes.txt")
head(as.numeric(rownames(binnedgenes)[binnedgenes$BIN == 1]))
head(binnedgenes)
library(glmnet)
#mouse model tested w/ human data
load("mouse/Robj/BC3MSD_CV-Lasso.Robj")
miR=readme("mouse/CWCS.txt.gz",gzip=T)
#half lives, kmer kreqs, & codon freqs features
a=readme("seqFeatWithKmerFreqs.txt.gz",gzip=T)
a=a[,c(1:10,grep("Codon",colnames(a)),grep("3UTR",colnames(a)))]
a$Codon.TAA=0
a$Codon.TAG=0
#augment matrix w/ mouse miRs -- set to 0 since they don't exist in human
b=readme("mouse/CWCS.txt.gz",gzip=T)
mirnames = paste0("MIR.",colnames(b)[2:ncol(b)])
df <- data.frame(matrix(ncol = length(mirnames), nrow = nrow(a)))
df[is.na(df)] = 0
colnames(df) <- mirnames
a=cbind(a, df)
say("with miRNA features")
seqpreds <- function(tool){
  humanorf=readme(paste0(tool,"_predictions_v83/ORF_avg.txt.gz"), gzip=T) #mm10_90
  human3p=readme(paste0(tool,"_predictions_v83/3pUTR_avg.txt.gz"), gzip=T) #mm10_90
  human5p=readme(paste0(tool,"_predictions_v83/5pUTR_avg.txt.gz"), gzip=T) #mm10_90
  colnames(humanorf)[2:ncol(humanorf)]=paste0(tool,colnames(humanorf)[2:ncol(humanorf)],".ORF")
  colnames(human3p)[2:ncol(human3p)]=paste0(tool,colnames(human3p)[2:ncol(human3p)],".3UTR")
  colnames(human5p)[2:ncol(human5p)]=paste0(tool,colnames(human5p)[2:ncol(human5p)],".5UTR")
  a=merge(humanorf,human3p,by=1,all=T)
  a=merge(a,human5p,by=1,all=T)
  a[is.na(a)]=0
  a
}
say("with SeqWeaver features")
a=merge(a,seqpreds("SeqWeaver"),by=1)
say("with DeepRiPe features")
a=merge(a,seqpreds("DeepRiPe"),by=1)
say("With Ensembl IDs + Features: ", nrow(a))
say("Dimensions: ", dim(a))
genes = a[,1]
a[,1]=NULL
dim(a)
length(rownames(cvfit$glmnet.fit$beta))
a[1:10,1:10]
x=scale(a[,rownames(cvfit$glmnet.fit$beta)])
apply(x,2,function(x)sum(is.na(x))
)
length(x[is.na(x)])
4114977/nrow(x)
x[is.na(x)]=0
y=scale(a[,1])
binnedgenes = read.delim("binnedgenes.txt")
yhat <- rep(NA,length(y))
for (i in 1:10) {
  predRows <- as.numeric(rownames(binnedgenes)[binnedgenes$BIN == i])
  yhat[predRows] = predict(cvfit,newx=x[predRows,],type="response",s=cvfit$lambda.min)
  say(cor(yhat[predRows], y[predRows]))
}
